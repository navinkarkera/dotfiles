#!/usr/bin/env bash

record() {
	# Toggle on mic
	# amixer set Capture toggle

	# Original command for my own screen: :0.0+1920,0 ensures only 2nd monitor is captured
	# -c:v sets codec, in this case, H.264; -qp 0 ensures lossless

	# Generic command to record at your screen dimensions
	# ffmpeg -s "$(xdpyinfo | awk '/dimensions/{print $2}')" -f x11grab -r 30 -i :0.0 -c:v h264 -qp 0 "$HOME/video_$(date '+%a__%b%d__%H_%M_%S').mkv" &
	# ffmpeg -s 3840x2160 -f x11grab -r 30 -i :0.0+2560,0 -c:v h264 -qp 0 "$HOME/video_$(date '+%a__%b%d__%H_%M_%S').mkv" &
	ffmpeg -s 2560x1413 -f x11grab -r 30 -i :0.0+0,27 -c:v h264 -qp 0 "$HOME/video_$(date '+%a__%b%d__%H_%M_%S').mkv" &
	echo $! > /tmp/recpid

	# Specify alsa device with hw:0 etc.
	# Filters audio noise with noise floor
	ffmpeg -f alsa -i default "$HOME/audio_$(date '+%a__%b%d__%H_%M_%S').wav" &
	echo $! > /tmp/audpid

	notify-send -t 500 -h string:bgcolor:#a3be8c "Recording started & mic toggled"
}

end() {
	kill -15 "$(cat /tmp/recpid)" "$(cat /tmp/audpid)" && rm -f /tmp/recpid /tmp/audpid

	# amixer set Capture toggle

	notify-send -t 500 -h string:bgcolor:#bf616a "Recording ended & mic toggled"
}

# If the recording pid exists, end recording. If not, start recording
([[ -f /tmp/recpid ]] && end && exit 0) || record
